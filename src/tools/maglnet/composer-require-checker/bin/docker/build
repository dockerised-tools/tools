#!/usr/bin/env bash

set -eu

readonly TOOL_PATH=$(realpath "$(dirname "$(realpath "$0")")/../..")

source "${TOOL_PATH}"/config/global.env
source "${TOOL_PATH}"/config/tool.inc.bash

function buildDockerImage() {
    local dockerImageTag="${1}"
    local dockerFileSuffix="${2}"

    title "Build Docker image ${dockerImageTag}"

    if [ "${DRY_RUN}" == false ]; then
        DOCKER_BUILDKIT=1 \
            docker \
                build \
                    --target=tool \
                    --pull \
                    --tag "${dockerImageTag}" \
                    --file "${TOOL_PATH}/docker/${dockerFileSuffix}/Dockerfile" \
                    ${DOCKER_BUILD_PARAMETERS} \
                    --build-arg PHP_DOCKER_IMAGE="${PHP_DOCKER_IMAGE}" \
                    --build-arg COMPOSER_DOCKER_IMAGE="${COMPOSER_DOCKER_IMAGE}" \
                    --build-arg TOOL_VERSION="${TOOL_VERSION}" \
                    "${TOOL_PATH}/docker/${dockerFileSuffix}"
    fi
}

function pushDockerImage() {
    local dockerImageTag="${1}"

    title "Push Docker image ${dockerImageTag}"

    if [ "${DRY_RUN}" == false ]; then
        docker push ${dockerImageTag}
    fi
}

function buildAndPushDockerImage() {
    local dockerImageTag="${1}"
    local dockerFileSuffix="${2}"

    buildDockerImage "${dockerImageTag}" "${dockerFileSuffix}"

    if [ ${PUSH_DOCKER_IMAGE} == true ]; then
        pushDockerImage "${dockerImageTag}"
    fi
}

function title() {
    local titleLength=${#1}
    printf "\n\e[46m\e[1;37m    "
    for x in $(seq 1 ${titleLength}); do printf " "; done;
    printf "\e[0m\n"

    printf "\e[46m\e[1;37m  ${1}  \e[0m\n"
    printf "\e[46m\e[1;37m    "
    for x in $(seq 1 ${titleLength}); do printf " "; done;
    printf "\e[0m\n\n"
}

readonly TOOL_VERSION="${1:-}"
if [ "${TOOL_VERSION}" == "" ]; then
    printf "\e[41m First parameter should be the tool version (ex: 1.2.3) \e[0m\n"
    exit 1
fi

readonly VERSION_PARTS=(${TOOL_VERSION//./ })
if [ ${#VERSION_PARTS[@]} != 3 ]; then
    printf "\e[41m Tool version should respect semantic versioning (ex: 1.2.3) \e[0m\n"
    exit 1
fi

readonly PHP_DOCKER_IMAGE_PART="${2:-}"
if [ "${PHP_DOCKER_IMAGE_PART}" == "" ]; then
    printf "\e[41m Second parameter should be the PHP part of the Docker image (ex: php-8.1) \e[0m\n"
    exit 1
fi

readonly PHP_DOCKER_IMAGE_SUFFIX="${3:-}"
if [ "${PHP_DOCKER_IMAGE_SUFFIX}" == "" ]; then
    printf "\e[41m Third parameter should be the Docker image suffix (ex: alpine, alpine-allexts) \e[0m\n"
    exit 1
fi

readonly PHP_DOCKER_IMAGE="${4:-}"
if [ "${PHP_DOCKER_IMAGE}" == "" ]; then
    printf "\e[41m Third parameter should be the Docker FROM value (ex: php:8.0.15-cli-alpine3.15) \e[0m\n"
    exit 1
fi

DOCKER_BUILD_PARAMETERS=""
PUSH_DOCKER_IMAGE=false
DRY_RUN=false
for param in "${@}"; do
    if [ "${param}" == "--refresh" ]; then
        DOCKER_BUILD_PARAMETERS="--no-cache"
    elif [ "${param}" == "--push" ]; then
        PUSH_DOCKER_IMAGE=true
    elif [ "${param}" == "--dry-run" ]; then
        DRY_RUN=true
    fi
done

buildAndPushDockerImage \
    "${TOOL_DOCKER_IMAGE_PREFIX}:${VERSION_PARTS[0]}.${VERSION_PARTS[1]}-${PHP_DOCKER_IMAGE_PART}-${PHP_DOCKER_IMAGE_SUFFIX}" \
    "${PHP_DOCKER_IMAGE_SUFFIX}"


for toolLatestMinorVersion in "${TOOL_LATEST_MINOR_VERSIONS[@]}"; do
    if [ "${toolLatestMinorVersion}" == "${TOOL_VERSION}" ]; then
        buildAndPushDockerImage \
            "${TOOL_DOCKER_IMAGE_PREFIX}:${VERSION_PARTS[0]}-${PHP_DOCKER_IMAGE_PART}-${PHP_DOCKER_IMAGE_SUFFIX}" \
            "${PHP_DOCKER_IMAGE_SUFFIX}"
        break;
    fi
done

if [ "${TOOL_VERSION}" == "${TOOL_LATEST_VERSION}" ]; then
    buildAndPushDockerImage \
        "${TOOL_DOCKER_IMAGE_PREFIX}:latest-${PHP_DOCKER_IMAGE_PART}-${PHP_DOCKER_IMAGE_SUFFIX}" \
        "${PHP_DOCKER_IMAGE_SUFFIX}"
fi
